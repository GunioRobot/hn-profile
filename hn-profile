#!/usr/bin/env perl

use strict;
use warnings;

use WWW::Mechanize;

use Carp            qw| croak       |;
use Getopt::Long    qw| GetOptions  |;
use JSON            qw| encode_json |;
use Try::Tiny       qw| try catch   |;

use vars qw|
    $user_id   $password
    $mech      $general_info
    $help      $saved_articles
    $verbose   $general_info
    $filename
|;

sub init
{
    binmode(STDOUT, ':utf8');

    $mech = WWW::Mechanize->new(
        timeout => 10,
        agent   => 'hn-profile/0.5',
    );

    netrc();

    my $result = GetOptions(
        'h|help'            => \$help,
        's|saved-articles'  => \$saved_articles,
        'i|general-info'    => \$general_info,
        'v|verbose+'        => \$verbose,
        'f|file=s'          => \$filename,
    );

    do { usage(); exit 1; } unless $result;
    do { usage(); exit;   } if $help;
}

sub run
{
    init();
    login();
    my $data = {};
    $data->{saved_articles} = saved_articles()  if $saved_articles;
    $data->{general_info}   = general_info()    if $general_info;
    output_json($data);
}

sub general_info
{
    my $url = shift || "http://news.ycombinator.com/user?id=$user_id";
    $mech->get($url);
    unless ($mech->success()) {
        print STDERR "Error: Could not fetch '$url'\n";
        return undef;
    }

    my %info = (
        created => ($mech->content =~ m!<td valign=top>created:</td><td>(.*?)</td>!)[0],
        karma   => ($mech->content =~ m!<td valign=top>karma:</td><td>(.*?)</td>!)[0],
        average => ($mech->content =~ m!<td valign=top>avg:</td><td>(.*?)</td>!)[0],
    );

    return \%info;
}

sub output_json
{
    my ($data) = @_;
    if ($filename) {
        local *STDOUT;
        open STDOUT, '>', $filename or die "Error: $!";
    }
    print encode_json($data);
    close STDOUT if $filename;
}

sub usage
{
    print <<USAGE
usage: hn-profile [options]

options:
    -h --help
            Print the help message

    -v --verbose
            An accumulating counter that starts at 0.  The higher the verbosity
            level, the more information that gets spit back at you. Note that
            this may get mixed in with the JSON output if you aren't sending it
            to a file.

    -f --file=FILE
            The file to dump the JSON to. By default, the JSON will be printed
            to STDOUT, so if you want to send it anywhere else, you'll have to
            use this option.

    -s --saved-articles
            Parse the 'saved articles' section of your Hacker News profile.
            This requires that you set the \$user_id and \$password globals in the
            script.  (Note: Login info handling is on the todo list to improve.)

    -i --general-info
            Parse out the generic information from your HN profile (e.g. karma
            score, avg. rating, etc).

       --settings
            Parse out the settings that control access to HN when logged into
            your profile (i.e. noprocrast, etc).
USAGE
}

sub tidy_url
{
    my ($url) = @_;
    if (ref $url) {
        die "Unknown ref: $url" unless (ref $url) eq 'WWW::Mechanize::Link';
        $url = $url->url_abs()->as_string();
    }
    return $url;
}

sub saved_articles
{
    no warnings "recursion";

    my ($articles, $counter, $url) = @_;
    $articles ||= [];
    $counter  ||= 0;
    $url      ||= "http://news.ycombinator.com/saved?id=$user_id";

    if(scalar(@$articles) != $counter) {
        die "Error: \$articles != \$counter\n"
          . "        This means that some articles on the previous page were not scraped!\n";

    }

    $counter += 30;
    print "Fetching links @{[ $counter - 29 ]} through $counter\n" if $verbose;

    try {
        $mech->get($url);
    } catch {
        croak($_) unless $_ =~ /Error GETing/;
        $url = tidy_url($url);
        print "Warning: Failed to fetch '$url'. Trying again...\n" if $verbose;
        $counter -= 30;
        return saved_articles($articles, $counter, $url);
    };
    unless ($mech->success()) {
        $url = tidy_url($url);
        print STDERR "Error fetching '$url'\n";
        return undef;
    }

    my @links;
    my @content = ($mech->content() =~ m!
        <td\ class="title">(.*?)</td>.*?
        <td\ class="subtext">(.*?)</td>!gsmx);

    unless (scalar(@content) % 2 == 0) {
        print STDERR "Error: Odd number of elements scraped from content. ",
                     "Aborting further scraping.\n";
        return undef;
    }

    while(@content) {
        my $title_data    = shift @content;
        my $subtext_data  = shift @content;

        unless ($title_data && $subtext_data) {
            print STDERR "Error: Got undefs for scraped string data. ",
                         "Scraping may be broken.\n";
            next;
        }

        my ($url, $title) = ($title_data =~ m#<a href="([^"]+?)">\s*(.*?)\s*</a>#sm);
        my ($score)       = ($subtext_data =~ m#<span id=score_\d+>\s*(\d+ points?)\s*</span>#sm);
        my ($user, $time) = ($subtext_data =~ m#<a href="user\?id=(.*?)">[^<]+</a>\s*(.*?)\s*\|#sm);
        my ($comments)    = ($subtext_data =~ m#<a href="(item\?id=\d+)">#sm);
        push @links, {
            user    => $user,
            title   => $title,
            time    => $time,
            score   => $score,
            url     => $url,
            comments=> $comments,
        };

        print <<MSG if $verbose > 1;
Title   : $title
User    : $user
Time    : $time
Score   : $score
Url     : $url
Comments: $comments
----------------------------
MSG
    }
    push @$articles, @links;

    my $more_url = $mech->find_link(text => 'More');
    return saved_articles($articles, $counter, $more_url) if $more_url;
}

sub login
{
    $mech->get('http://news.ycombinator.com/news');
    return undef unless $mech->success();

    $mech->follow_link( text_regex => qr/^login$/ );
    return undef unless $mech->success();

    $mech->submit_form(
        form_number => 1,
        fields      => { u => $user_id, p => $password, },
    );
    return $mech->success();
}

sub netrc
{
    die "Error: Could not find ~/.netrc file!" unless -f "$ENV{HOME}/.netrc";
    die "Error: Could not read ~/.netrc file!" unless -r "$ENV{HOME}/.netrc";

    open my $fh, '<', "$ENV{HOME}/.netrc"
        or die "Error: Unable to open '$ENV{HOME}/.netrc': $!";

    my @machine_matches = grep { /machine\s+news\.ycombinator\.com/ } <$fh>;
    die "Error: No matches for news.ycombinator.com in ~/.netrc."
        unless scalar(@machine_matches);

    my $last_match = pop @machine_matches;

    $user_id = $1 if ($last_match =~ /\slogin\s+([^\s]+)/);
    die "Error: Could not parse user_id from ~/.netrc" unless $user_id;

    $password = $1 if ($last_match =~ /\spassword\s+([^\s]+)/);
    die "Error: Could not parse password from ~/.netrc" unless $password;

    close $fh;
}

run();
